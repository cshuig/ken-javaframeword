<?xml version="1.0" encoding="utf-8"?>
<view:BaseSimpleContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" 
						  xmlns:view="com.shine.framework.core.view.*" 
						  moveable="true">
	<view:layout>
		<s:BasicLayout/>
	</view:layout>
	<fx:Script>
		<![CDATA[
			import com.shine.framework.core.model.BaseXmlModel;
			import com.shine.framework.core.util.EventUtil;
			import com.shine.framework.core.util.XMLArrayCollection;
			import com.shine.framework.core.util.XmlModelArrayCollection;
			import com.shine.topo.model.RightXmlModel;
			import com.shine.topo.util.TopoLinesArrayCollection;
			import com.shine.topo.view.BaseInfoContainer;
			import com.shine.topo.view.BaseInfoTextArea;
			import com.shine.topo.view.Line.TopoLine;
			import com.shine.topo.view.label.TopoLabel;
			
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.effects.Glow;
			import mx.events.MoveEvent;
			
			import spark.components.BorderContainer;
			import spark.skins.spark.BorderContainerSkin;
			
			
			//起点连线
			public var fromLineArrayCollection:TopoLinesArrayCollection=new TopoLinesArrayCollection;
			//终点连线
			public var toLineArrayCollection:TopoLinesArrayCollection=new TopoLinesArrayCollection;
			
			//原始位置
			public var ox:Number;
			public var oy:Number;
			
			public var baseXmlModel:BaseXmlModel;
			
			//topo图片
			public var topoImage:Image;
			public var topoLabel:TopoLabel;
			public var infoContainer:BaseInfoContainer;
			public var topoActive:BorderContainer;
			
			//选中状态
			public var selectStatement:Boolean=false;
			
			//右键菜单列表
			public var rightArrayCollection:XMLArrayCollection;
			
			
			//初始化节点数据
			public function initNode(value:BaseXmlModel):void{
				this.baseXmlModel=value;
				
				topoActive=new BorderContainer;
				topoActive.width=this.width;
				topoActive.height=this.height;
				topoActive.visible=false;
				topoActive.setStyle("borderWeight",3);
				topoActive.setStyle("borderStyle","solid");
				this.addElement(topoActive);

				topoImage=new Image;
				topoImage.maintainAspectRatio=false;
				topoImage.width=this.width;
				topoImage.height=this.height;
				this.addElement(topoImage);
				refreshImage();
				
				this.x=value.getNumber("x");
				this.y=value.getNumber("y");
				this.ox=this.x;
				this.oy=this.y;
				
				topoLabel=new TopoLabel;
				refreshLabel();
				
				if(value.getString("doubleClick")!=null)
					this.addEventListener(MouseEvent.DOUBLE_CLICK,doubleClick);
				
				this.addEventListener(MoveEvent.MOVE,moveLine);
				this.addEventListener(MouseEvent.MOUSE_MOVE,moveMouse);
				this.addEventListener(MouseEvent.MOUSE_OVER,over);
				this.addEventListener(MouseEvent.MOUSE_OUT,out);
				
				value=null;
			}
			
			public function setActive():void{
				topoActive.visible=true;
			}
			
			
			//双击事件
			private function doubleClick(event:MouseEvent):void{
				if(this.baseXmlModel.getString("doubleClickType")!=null)
				  EventUtil.event(this.baseXmlModel.getString("doubleClick"),this.baseXmlModel.getString("doubleClickType"));
				else
				  EventUtil.event(this.baseXmlModel.getString("doubleClick"),"newPage");	
			}
			
			//初始化右键菜单
			public function initRight(value:XMLArrayCollection):void{
				this.rightArrayCollection=value;
				var contextMenu:ContextMenu=new ContextMenu();
				contextMenu.hideBuiltInItems();
				
				for each(var rightXmlModel:RightXmlModel in value){
					var contextMenuItem:ContextMenuItem=new ContextMenuItem(rightXmlModel.getString("label"));
					contextMenuItem.addEventListener(flash.events.ContextMenuEvent.MENU_ITEM_SELECT, selectItem);
					contextMenu.customItems.push(contextMenuItem);
				}
				
				this.contextMenu=contextMenu;
			}
			
			//右键菜单选中
			private function selectItem(event:ContextMenuEvent):void
			{
				for each(var rightXmlModel:RightXmlModel in this.rightArrayCollection){
					if((event.currentTarget as ContextMenuItem).caption ==rightXmlModel.getString("lable")){
						if(rightXmlModel.getString("returnType")!=null)
							EventUtil.event(rightXmlModel.getHandleUrl(this.baseXmlModel),rightXmlModel.getString("returnType"));
						else
							EventUtil.event(rightXmlModel.getHandleUrl(this.baseXmlModel),"newPage");
					}
				}
			}
			
			//刷新链路和label
			private function moveLine(event:MoveEvent):void{
				refreshLine();
				refreshLabel();
			}
			
			//刷新链路和label
			private function moveMouse(event:MouseEvent):void{
				refreshLine();
				refreshLabel()
			}
			
			//移入设备
			private function over(event:MouseEvent):void{
				if(this.baseXmlModel.getString("message")!=null||this.baseXmlModel.getString("message").length!=0)
					infoContainer.showDetail(this.baseXmlModel.getString("message"));
			}
			
			//移出设备
			private function out(event:MouseEvent):void{
				infoContainer.hideDetail();
			}
			
			//刷新链路
			public function refreshLine():void{
				for each(var topoLine:TopoLine in fromLineArrayCollection){
					topoLine.resetBeginLine(getCenterX(),getCenterY());
				}
				
				for each(var topoLine:TopoLine in toLineArrayCollection){
					topoLine.resetEndLine(getCenterX(),getCenterY());
				}
			}
			
			//加入链路起点
			public function addFromLine(value:TopoLine):void{
				fromLineArrayCollection.addTopoLine(value);
				value.resetBeginLine(this.getCenterX(),this.getCenterY());
			}
			
			//删除链路起点
			public function delteFromLine(value:TopoLine):void{
				fromLineArrayCollection.removeTopoLine(value);
			}
			
			//加入链路终点
			public function addToLine(value:TopoLine):void{
				toLineArrayCollection.addTopoLine(value);
				value.resetEndLine(this.getCenterX(),this.getCenterY());
			}
			
			//删除链路终点
			public function delteToLine(value:TopoLine):void{
				toLineArrayCollection.removeTopoLine(value);
			}
			
			//刷新label位置
			public function refreshLabel():void{
				if(topoLabel!=null){
					topoLabel.x=this.x;
					topoLabel.y=getBottomRightY();
					topoLabel.setHtml(this.baseXmlModel.getString("label"));
					topoLabel.setUrl(this.baseXmlModel.getString("url"));
				}
			}
			
		    //用于缩放
			public function resize(value:Number):void{
				this.x=this.ox*value/100;
				this.y=this.oy*value/100;
				refreshLine();
				refreshLabel();
			}
			
			//刷新设备图片
			public function refreshImage():void{
				topoImage.width=this.width;
				topoImage.height=this.height;
				topoImage.source=this.baseXmlModel.getString("image");
			}
			
			public function setSelect():void{
				if (!selectStatement)
				{
					var glow:Glow=new Glow(this);
					glow.duration=1000;
					glow.alphaFrom=1.0;
					glow.alphaTo=0.3;
					glow.blurXFrom=0.0;
					glow.blurXTo=this.width/2+20.0;
					glow.blurYFrom=0.0;
					glow.blurYTo=this.width/2+20.0;
					glow.color=0x00ff00;
					glow.play();
					selectStatement=true;
				}
			}	
			
			//取消选中
			public function cancelSelect():void
			{
				if (selectStatement)
				{
					var glow:Glow=new Glow(this);
					glow.duration=1000;
					glow.alphaFrom=0.3;
					glow.alphaTo=1.0;
					glow.blurXFrom=this.width/2+20.0;
					glow.blurXTo=0.0;
					glow.blurYFrom=this.width/2+20.0;
					glow.blurYTo=0.0;
					glow.color=0x00ff00;
					glow.play();
					selectStatement=false;
				}
			}
			
			public function savePoint():void{
				this.ox=this.x;
				this.oy=this.y;
			}
			
			public function getBottomRightX():Number{
				return this.x+this.width;
			}
			
			public function getBottomRightY():Number{
				return this.y+this.height;
			}
		]]>
	</fx:Script>
</view:BaseSimpleContainer>
